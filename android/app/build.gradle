apply plugin: 'com.android.application'
import com.android.build.gradle.internal.tasks.FinalizeBundleTask

ext {
   
}

android {
    namespace "org.sunbird"
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId app_id.replaceAll("\\s","")
        resValue("string", "app_name", "${app_name}")
        resValue("string", "app_id", "${app_id}")
        resValue("string", "custom_scheme_url", "${custom_scheme_url}")
        resValue("string", "deeplink_base_url", "${deeplink_base_url}")
        resValue("string", "deeplink_igot_url", "${deeplink_igot_url}")
        resValue("string", "deeplink_ncert_url", "${deeplink_ncert_url}")
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
		versionCode 1
        ext.buildNumber = System.getenv("TRAVIS_BUILD_NUMBER") ?: "local"
		versionName "6.0.local"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
            // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
            // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs {
        release {
            storeFile = file("keystore/android_keystore.jks")
            storePassword System.getenv("PROD_SIGNING_STORE_PASSWORD")
            keyAlias System.getenv("PROD_SIGNING_KEY_ALIAS")
            keyPassword System.getenv("PROD_SIGNING_KEY_PASSWORD")
        }
        debug {
            storeFile = file("keystore/android_debug_keystore.jks")
            storePassword System.getenv("DEBUG_SIGNING_STORE_PASSWORD")
            keyAlias System.getenv("DEBUG_SIGNING_KEY_ALIAS")
            keyPassword System.getenv("DEBUG_SIGNING_KEY_PASSWORD")
        }
    }
    buildTypes {
         debug {
            if (project.hasProperty('enforceReleaseSigningForDebug')) {
                signingConfig signingConfigs.debug
            }
            buildConfigField "String", "SUPPORT_EMAIL","\"${support_email}\""
            buildConfigField 'String', 'BASE_URL', "\"${base_url}\""
            buildConfigField 'String', 'MOBILE_APP_KEY', "\"${mobile_app_key}\""
            buildConfigField 'String', 'MOBILE_APP_SECRET', "\"${mobile_app_secret}\""
            buildConfigField 'String', 'CHANNEL_ID', "\"${channel_id}\""
            buildConfigField 'int', 'MAX_COMPATIBILITY_LEVEL', "5"
            buildConfigField 'String', 'MOBILE_APP_CONSUMER', '"mobile_device"'
            buildConfigField 'String', "REAL_VERSION_NAME", "\"${real_version_name}\""
            buildConfigField 'String', "VERSION_NAME", "\"${version_name}\""
            buildConfigField 'String', "TOU_BASE_URL", "\"${tou_base_url}\""

        }
        release {
            signingConfig signingConfigs.release
            buildConfigField "String", "SUPPORT_EMAIL","\"${support_email}\""
            buildConfigField 'String', 'BASE_URL', "\"${base_url}\""
            buildConfigField 'String', 'MOBILE_APP_KEY', "\"${mobile_app_key}\""
            buildConfigField 'String', 'MOBILE_APP_SECRET', "\"${mobile_app_secret}\""
            buildConfigField 'String', 'CHANNEL_ID', "\"${channel_id}\""
            buildConfigField 'int', 'MAX_COMPATIBILITY_LEVEL', "5"
            buildConfigField 'String', 'MOBILE_APP_CONSUMER', '"mobile_device"'
            buildConfigField 'String', "REAL_VERSION_NAME", "\"${real_version_name}\""
            buildConfigField 'String', "VERSION_NAME", "\"${version_name}\""
            buildConfigField 'String', "TOU_BASE_URL", "\"${tou_base_url}\""
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
 applicationVariants.configureEach { variant ->
        def artifactName = "${app_name.toLowerCase()}-${variant.getVersionName()}-${variant.buildType.name}"
        variant.outputs.configureEach {
            outputFileName = "${artifactName}.apk"
        }
        tasks.named("sign${variant.name.capitalize()}Bundle", FinalizeBundleTask) {
            File file = finalBundleFile.asFile.get()
            File finalFile = new File(file.parentFile, "${artifactName}.aab")
            finalBundleFile.set(finalFile)
        }
    }
} // android


repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}